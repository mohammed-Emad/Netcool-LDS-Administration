"""
Django settings for core core.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import json
from django.core.exceptions import ImproperlyConfigured

import os
import base64
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto import Random
import socket
import datetime
import logging
from logging.config import dictConfig
from django.contrib.messages import constants as message_constants
MESSAGE_LEVEL = 10

# Build paths inside the core like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

def de(key, source, decode=True):
    if decode:
        source = base64.b64decode(source.encode("latin-1"))
    key = SHA256.new(key).digest()  # use SHA-256 over our key to get a proper-sized AES key
    IV = source[:AES.block_size]  # extract the IV from the beginning
    decryptor = AES.new(key, AES.MODE_CBC, IV)
    data = decryptor.decrypt(source[AES.block_size:])  # decrypt
    padding = data[-1]  # pick the padding value from the end; Python 2.x: ord(data[-1])
    if data[-padding:] != bytes([padding]) * padding:  # Python 2.x: chr(padding) * padding
        raise ValueError("Invalid padding...")
    return data[:-padding].decode()  # remove the padding

with open(os.path.join(BASE_DIR, 'rrms.json')) as secrets_file:
    secrets = json.load(secrets_file)

def get_secret(setting, secrets=secrets):
    """Get secret setting or fail with ImproperlyConfigured"""
    try:
        return secrets[setting]
    except KeyError:
        raise ImproperlyConfigured("Set the {} setting".format(setting))
        
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

data_k = get_secret('data_k').encode('utf-8')
# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = '75oef^qajr2e+$!d-ssc0i5lcicx0_z$lof8*ek%@bh*c(2*t&'
SECRET_KEY =  de(data_k ,get_secret('SECRET_KEY'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django.contrib.redirects',
    'crud'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
#AUTH_USER_MODEL = "core.UserManage" 
#AUTH_USER_MODEL = 'crud.UserProfileInfo'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases db_table = '"DB2LDS." "COMPUTERSYSTEM"'
'''
#:
DATABASES = {
    'default': {
        'ENGINE': 'ibm_db_django',
        'NAME': 'GSMALDMM', #de(data_k, get_secret('DB_Name')),
        'USER': de(data_k, get_secret('Name')),
        'PASSWORD': de(data_k, get_secret('DB_PASSWORD')),
        'HOST': de(data_k, get_secret('Host')),
        'PORT': '42880', #de(data_k, get_secret('port')),
        'PCONNECT': 'True',
    }
}

'''
   
'''
DATABASES = {
    'default': {
        'ENGINE': 'ibm_db_django',
        'NAME': 'GSMALDS',
        'USER': 'db2inst1',
        'PASSWORD': 'op900op900',
        'HOST': 'localhost',
        'PORT': '50000',
        'PCONNECT': 'True',
    }
}
'''
#conn2 = ibm_db.connect("DATABASE=GSMALDS;HOSTNAME=serveo.net;PORT=39417;PROTOCOL=TCPIP;UID=db2inst1;PWD=op900op900;", "", "")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

DT = datetime.date.today().strftime('%Y-%m-%d')
userlog = 'Name #Email'

#.format(userlog)
LOGGING = {
      'version': 1,
      'disable_existing_loggers': False,
      'formatters':{
		'large':{
			'format':'%(asctime)s #{}#[%(message)s]'.format(userlog)
		},
		'tiny':{
			'format':'%(asctime)s  #%(message)s'
		}
	},
	

      'handlers': {
          'file': {
              'level': 'DEBUG',
              'class':'logging.handlers.TimedRotatingFileHandler',
              'filename':os.path.join(BASE_DIR, 'logg.log'),
              'formatter':'large',
          },
      },
      'loggers': {
          'django.db.backends': {
              'handlers': ['file'],
              'level': 'DEBUG',
              'propagate': True,
          },
      },
  }

LOGGINGGG = {
      'version': 1,
      'disable_existing_loggers': False,
      'handlers': {
          'file': {
              'level': 'DEBUG',
              'class': 'logging.FileHandler',
              'filename':os.path.join(BASE_DIR, 'logg2.log')
          },
      },
      'loggers': {
          'django.db.backends': {
              'handlers': ['file'],
              'level': 'DEBUG',
              'propagate': True,
          },
      },
  }

import logging.config


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

SITE_ID = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATIC_URL = '/static/'

LOGIN_URL = '/crud/user_login/'


#######################ldap
import os

import ldap
from django_auth_ldap.config import LDAPSearch
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

basedn = "OU=skymobi,DC=sky-mobi,DC=com"
AUTH_LDAP_SERVER_URI = 'ldap://192.192.192.192:389'
AUTH_LDAP_BIND_DN = 'user'
AUTH_LDAP_BIND_PASSWORD = "passwd"


AUTH_LDAP_USER_SEARCH = LDAPSearch('OU=skymobi,DC=sky-mobi,DC=com', ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)")

AUTH_LDAP_USER_ATTR_MAP = {
     "first_name": "givenName",
     "last_name": "sn",
     "email": "mail"
}

